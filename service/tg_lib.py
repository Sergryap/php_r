import re
import json
import textwrap

import telegram.ext

from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton
)

from django.utils.timezone import now
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from django.conf import settings
from users.models import Customer, Freelancer
from service.models import Order


def show_auth_user_type(context, chat_id):
    message = '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å'
    context.bot.send_message(
        chat_id=chat_id,
        text=message,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton('–ó–∞–∫–∞–∑—á–∏–∫', callback_data='Customer'),
                    InlineKeyboardButton('–§—Ä–∏–ª–∞–Ω—Å–µ—Ä', callback_data='Freelancer')
                ]
            ],
            resize_keyboard=True
        )
    )


def show_auth_keyboard(context, chat_id):
    message = textwrap.dedent('''
        –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏–∂–µ:''')
    auth_keyboard = KeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
    reply_markup = ReplyKeyboardMarkup(
        [[auth_keyboard]], one_time_keyboard=False,
        row_width=1, resize_keyboard=True
    )
    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)


def show_send_contact_keyboard(context, chat_id):
    message = '''–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'''
    contact_keyboard = KeyboardButton(text="‚òé –ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    reply_markup = ReplyKeyboardMarkup(
        [[contact_keyboard]], one_time_keyboard=False,
        row_width=1, resize_keyboard=True
    )
    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)


def show_freelancer_start(context, chat_id):
    message = '–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–¥–Ω–æ–º –∏–∑ –∑–∞–∫–∞–∑–æ–≤:'
    orders = Order.objects.filter(status='1 not processed')
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(order.title, callback_data=order.title)] for order in orders
        ],
        resize_keyboard=True
    )
    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)


def show_customer_start(context, chat_id):
    message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton('–≠–∫–æ–Ω–æ–º', callback_data='economy'),
                InlineKeyboardButton('–°—Ç–∞–Ω–¥–∞—Ä—Ç', callback_data='base'),
                InlineKeyboardButton('VIP', callback_data='vip'),
            ]
        ],
        resize_keyboard=True
    )
    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)


def show_creating_order_step(context, chat_id, step):
    message = {
        1: '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
        2: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
        3: '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç',
        4: '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑–∞'
    }
    callback_data = {
        1: 'title',
        2: 'description',
        3: 'freelancer',
        4: 'verify'
    }
    reply_markup = {
        1: InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=callback_data[step])]],
            resize_keyboard=True
        ),
        2: InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=callback_data[step])]],
            resize_keyboard=True
        ),
        3: InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton('Freelancer', callback_data=callback_data[step]),
                    InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='break')
                ],
            ],
            resize_keyboard=True
        ),
        4: InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton('–í–µ—Å—å –∑–∞–∫–∞–∑', callback_data=callback_data[step])]],
            resize_keyboard=True
        ),
    }

    context.bot.send_message(chat_id=chat_id, text=message[step], reply_markup=reply_markup[step])


def show_customer_step(context, chat_id):
    message = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='pay')],
            [InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='create_order')],
            [InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='show_orders')],
        ],
        resize_keyboard=True
    )
    context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)


def show_customer_orders(update, context):
    user_data = context.user_data
    chat_id = update.effective_chat.id
    customer, _ = Customer.objects.get_or_create(
        username=f'{update.effective_user.username}_{chat_id}',
    )
    orders = Order.objects.filter(client=customer)
    for order in orders:
        status = order.status
        if status == '33' or status == '1 not processed':
            freelancer = '–ù–µ –≤—ã–±—Ä–∞–Ω'
            callback_data = 'empty_telegramm_id'
            reply_markup = None
        else:
            freelancer = f'{order.freelancer.first_name}'
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            '–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É',
                            callback_data=f"tg_id:{order.freelancer.telegram_id}"
                        )
                    ]
                ],
                resize_keyboard=True
            )

        context.bot.send_message(
            chat_id=chat_id,
            text='\n'.join(
                [
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order.title}",
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description}",
                    f"–§—Ä–∏–ª–∞–Ω—Å–µ—Ä: {freelancer}"
                ],
            ),
            reply_markup=reply_markup
        )


def show_freelancers(context, chat_id):
    freelancers = Freelancer.objects.all()
    inline_keyboard = [[
            InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='break')
        ]]
    for freelancer in freelancers:
        inline_keyboard.append([
            InlineKeyboardButton(freelancer.first_name, callback_data=freelancer.telegram_id)
        ])
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=inline_keyboard,
        resize_keyboard=True
    )
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ'
    context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)


